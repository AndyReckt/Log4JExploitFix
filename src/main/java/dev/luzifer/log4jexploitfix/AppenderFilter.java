package dev.luzifer.log4jexploitfix;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.LogEvent;
import org.apache.logging.log4j.core.Logger;
import org.apache.logging.log4j.core.filter.AbstractFilter;
import org.apache.logging.log4j.core.filter.AbstractFilterable;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class AppenderFilter {
    
    public static void tryApply(Log4JExploitFix plugin) {
        try {
            List<String> names = apply(plugin);
            plugin.getLogger().info("Successfully applied filters to Appenders " + String.join(", ", names));
        } catch (Throwable t) {
            plugin.getLogger().warning("Could not add filters to logger. Logger version is probably incompatible!");
        }
    }
    
    private static List<String> apply(Log4JExploitFix plugin) {
        
        Map<String, Appender> appenders = ((Logger) LogManager.getRootLogger()).getAppenders();
        LoggerFilter filter = new LoggerFilter(plugin);
        
        List<Appender> filterable = appenders.values().stream()
                .filter((appender -> appender instanceof AbstractFilterable))
                .collect(Collectors.toList());
        
        filterable.forEach(appender -> ((AbstractFilterable) appender).addFilter(filter));
        
        return filterable.stream()
                .map(Appender::getName)
                .collect(Collectors.toList());
    }
    
    private static class LoggerFilter extends AbstractFilter {

        private final Log4JExploitFix plugin;

        public LoggerFilter(Log4JExploitFix plugin) {
            this.plugin = plugin;
        }
        
        @Override
        public Result filter(LogEvent event) {
            
            String message = event.getMessage().getFormattedMessage();
            if (message.indexOf('$') != -1 && Log4JExploitFix.pattern.matcher(message.toLowerCase()).find()) {
                //noinspection finally
                try {
                    if (Config.getLogging().isLogFilter()) {
                        this.plugin.log("Caught malicious message in log filter: " + message);
                    }
                } finally {
                    /*
                      Returning in this block will cause any exception from the above try-block to be discarded.
                      This is usually bad practice. However, we would not log any caught exception anyway as it
                      could lead to an infinite loop. And not having a catch-block will save some amount of
                      performance.
                     */
                    //noinspection ReturnInsideFinallyBlock
                    return Result.DENY;
                }
            }

            return super.filter(event);
        }
    }
}
